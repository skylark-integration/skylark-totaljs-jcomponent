{"version":3,"sources":["components/registry.js"],"names":["define","namespaceInit","types","instances","addType","type","typeClass","toLowerCase","hasType","createInstance","settings","ControlType","name","namespace","tinymce","ui","Error","addInstance","inst","push","allInstances"],"mappings":";;;;;;;AAAAA,UACG,WACC,IAGIC,EAHAC,KACAC,KAGJ,OAQIC,QAAS,SAASC,EAAMC,GACpBJ,EAAMG,EAAKE,eAAiBD,GAUhCE,QAAS,SAASH,GACd,QAASH,EAAMG,EAAKE,gBAkBxBE,eAAgB,SAASJ,EAAMK,GAC3B,IAAIC,EAAaC,EAAMC,EAGvB,IAAKZ,EAAe,CAGhB,IAAKW,KAFLC,EAAYC,QAAQC,GAGhBb,EAAMU,EAAKL,eAAiBM,EAAUD,GAG1CX,GAAgB,EAkBpB,GAdmB,iBAARI,GACPK,EAAWA,OACFL,KAAOA,EAGhBA,GADAK,EAAWL,GACKA,KAIpBA,EAAOA,EAAKE,gBACZI,EAAcT,EAAMG,IAKhB,MAAM,IAAIW,MAAM,mCAAqCX,GAQzD,OAHAM,EAAc,IAAIA,EAAYD,IAClBL,KAAOA,EAEZM,GAGXT,MAAQA,EACRC,UAAYA,EAEZc,YAAc,SAASC,GACnBf,EAAUgB,KAAKD,IAGnBE,aAAe,WACX,OAAOjB","file":"../../components/registry.js","sourcesContent":["define([\r\n], function() {\r\n    var types = {},\r\n        instances = [] ,\r\n        extensions = [],\r\n        namespaceInit;\r\n    return {\r\n        /**\r\n         * Adds a new control instance type to the factory.\r\n         *\r\n         * @method add\r\n         * @param {String} type Type name for example \"button\".\r\n         * @param {function} typeClass Class type function.\r\n         */\r\n        addType: function(type, typeClass) {\r\n            types[type.toLowerCase()] = typeClass;\r\n        },\r\n\r\n        /**\r\n         * Returns true/false if the specified type exists or not.\r\n         *\r\n         * @method has\r\n         * @param {String} type Type to look for.\r\n         * @return {Boolean} true/false if the control by name exists.\r\n         */\r\n        hasType: function(type) {\r\n            return !!types[type.toLowerCase()];\r\n        },\r\n\r\n        /**\r\n         * Creates a new control instance based on the settings provided. The instance created will be\r\n         * based on the specified type property it can also create whole structures of components out of\r\n         * the specified JSON object.\r\n         *\r\n         * @example\r\n         * tinymce.ui.Factory.create({\r\n         *     type: 'button',\r\n         *     text: 'Hello world!'\r\n         * });\r\n         *\r\n         * @method create\r\n         * @param {Object/String} settings Name/Value object with items used to create the type.\r\n         * @return {tinymce.ui.Control} Control instance based on the specified type.\r\n         */\r\n        createInstance: function(type, settings) {\r\n            var ControlType, name, namespace;\r\n\r\n            // Build type lookup\r\n            if (!namespaceInit) {\r\n                namespace = tinymce.ui;\r\n\r\n                for (name in namespace) {\r\n                    types[name.toLowerCase()] = namespace[name];\r\n                }\r\n\r\n                namespaceInit = true;\r\n            }\r\n\r\n            // If string is specified then use it as the type\r\n            if (typeof type == 'string') {\r\n                settings = settings || {};\r\n                settings.type = type;\r\n            } else {\r\n                settings = type;\r\n                type = settings.type;\r\n            }\r\n\r\n            // Find control type\r\n            type = type.toLowerCase();\r\n            ControlType = types[type];\r\n\r\n            // #if debug\r\n\r\n            if (!ControlType) {\r\n                throw new Error(\"Could not find control by type: \" + type);\r\n            }\r\n\r\n            // #endif\r\n\r\n            ControlType = new ControlType(settings);\r\n            ControlType.type = type; // Set the type on the instance, this will be used by the Selector engine\r\n\r\n            return ControlType;\r\n        },\r\n\r\n        types : types,\r\n        instances : instances,\r\n\r\n        addInstance : function(inst) {\r\n            instances.push(inst);\r\n        },\r\n\r\n        allInstances : function() {\r\n            return instances;\r\n        }\r\n    };\r\n\r\n});\r\n"]}