{"version":3,"sources":["utils/block.js"],"names":["define","localStorage"],"mappings":";;;;;;;AAAAA,QACC,0BACC,SAASC","file":"../../utils/block.js","sourcesContent":["define([\r\n\t\"../stores/localStorage\"\r\n],function(localStorage){\r\n\tvar blocked = {};\r\n\r\n   /**\r\n   * Lock some code for a specific time. \r\n   * This method will paths info about blocking in localStorage if the expiration is longer than 10 seconds.\r\n   * @param  {String} name   \r\n   * @param  {Number} timeout \r\n   * @param  {Function} callback  \r\n   */\r\n\tfunction block(name, timeout, callback) { //W.BLOCKED = \r\n\t\tvar key = name;\r\n\t\tvar item = blocked[key];\r\n\t\tvar now = Date.now();\r\n\r\n\t\tif (item > now) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (langx.isString(timeout)) {\r\n\t\t\ttimeout = timeout.env().parseExpire();\r\n\t\t}\r\n\r\n\t\tvar local = MD.localstorage && timeout > 10000;\r\n\t\tblocked[key] = now + timeout;\r\n\t\tif (!M.isPRIVATEMODE && local) { // W.isPRIVATEMODE\r\n\t\t  //localStorage.setItem(M.$localstorage + '.blocked', JSON.stringify(blocked));\r\n\t\t  localStorage.set('blocked', blocked);\r\n\t\t}\r\n\t\tcallback && callback();\r\n\t\treturn false;\r\n\t};\r\n\r\n\tfunction load() {\r\n\t\tclearTimeout($ready);\r\n\t\tif (MD.localstorage) {\r\n\t\t\tvar cache;\r\n\t\t\ttry {\r\n\t\t\t\tcache = localStorage.getItem(M.$localstorage + '.blocked');\r\n\t\t\t\tif (cache && langx.isString(cache)) {\r\n\t\t\t\t\tblocked = langx.parse(cache);  // PARSE\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {}\r\n\t\t}\r\n\r\n\t\tM.loaded = true;\r\n\t}\r\n\r\n\r\n});"]}